{"version":3,"sources":["../src/index.ts","../src/exa.constants.ts"],"sourcesContent":["import fetch, { Headers } from \"cross-fetch\";\nimport {\n  RegularSearchOptions,\n  SearchResponse,\n  ContentsOptions,\n  FindSimilarOptions,\n  SearchResult,\n} from \"./exa.types\";\nimport { constants } from \"./exa.constants\";\n\n/**\n * The Exa class encapsulates the API's endpoints.\n */\nclass Exa {\n  private baseURL: string;\n  private headers: Headers;\n\n  /**\n   * Constructs the Exa API client.\n   * @param {string} apiKey - The API key for authentication.\n   * @param {string} [baseURL] - The base URL of the Exa API.\n   */\n  constructor(apiKey?: string, baseURL: string = constants.BASE_URL) {\n    this.baseURL = baseURL;\n    if (!apiKey) {\n      apiKey = process.env.EXASEARCH_API_KEY;\n      if (!apiKey) {\n        throw new Error(\n          \"API key must be provided as an argument or as an environment variable (EXASEARCH_API_KEY)\"\n        );\n      }\n    }\n    this.headers = new Headers({\n      \"x-api-key\": apiKey,\n      \"Content-Type\": constants.CONTENT_TYPE,\n      \"User-Agent\": constants.USER_AGENT,\n    });\n  }\n\n  /**\n   * Makes a request to the Exa API.\n   * @param {string} endpoint - The API endpoint to call.\n   * @param {string} method - The HTTP method to use.\n   * @param {any} [body] - The request body for POST requests.\n   * @returns {Promise<SearchResponse>} The response from the API.\n   */\n  private async request(\n    endpoint: string,\n    method: string,\n    body?: any\n  ): Promise<SearchResponse> {\n    const response = await fetch(this.baseURL + endpoint, {\n      method,\n      headers: this.headers,\n      body: body ? JSON.stringify(body) : undefined,\n    });\n\n    if (!response.ok) {\n      const message = (await response.json()).error;\n      throw new Error(\n        `Request failed with status ${response.status}. ${message}`\n      );\n    }\n\n    return await response.json();\n  }\n\n  /**\n   * Performs a search with a Exa prompt-engineered query.\n   * @param {string} query - The query string.\n   * @param {SearchOptions} [options] - Additional search options.\n   * @returns {Promise<SearchResponse>} A list of relevant search results.\n   */\n  async search(\n    query: string,\n    options?: RegularSearchOptions\n  ): Promise<SearchResponse> {\n    return await this.request(constants.ENDPOINTS.SEARCH, \"POST\", {\n      query,\n      ...options,\n    });\n  }\n\n  /**\n   * Performs a search with a Exa prompt-engineered query and returns the contents of the documents.\n   * @param {string} query - The query string.\n   * @param {SearchOptions} [options] - Additional search options.\n   * @returns {Promise<SearchResponse>} A list of relevant search results.\n   */\n  async searchAndContents<T extends ContentsOptions>(\n    query: string,\n    options?: RegularSearchOptions & T\n  ): Promise<SearchResponse<T>> {\n    const { text, highlights, ...rest } = options || {};\n    return await this.request(constants.ENDPOINTS.SEARCH, \"POST\", {\n      query,\n      contents:\n        !text && !highlights\n          ? { text: true }\n          : {\n              ...(text ? { text } : {}),\n              ...(highlights ? { highlights } : {}),\n            },\n      ...rest,\n    });\n  }\n\n  /**\n   * Finds similar links to the provided URL.\n   * @param {string} url - The URL for which to find similar links.\n   * @param {FindSimilarOptions} [options] - Additional options for finding similar links.\n   * @returns {Promise<SearchResponse>} A list of similar search results.\n   */\n  async findSimilar(\n    url: string,\n    options?: FindSimilarOptions\n  ): Promise<SearchResponse> {\n    return await this.request(constants.ENDPOINTS.SIMILAR_SEARCH, \"POST\", {\n      url,\n      ...options,\n    });\n  }\n\n  /**\n   * Finds similar links to the provided URL and returns the contents of the documents.\n   * @param {string} url - The URL for which to find similar links.\n   * @param {FindSimilarOptions} [options] - Additional options for finding similar links.\n   * @returns {Promise<SearchResponse>} A list of similar search results.\n   */\n  async findSimilarAndContents<T extends ContentsOptions>(\n    url: string,\n    options?: FindSimilarOptions & T\n  ): Promise<SearchResponse<T>> {\n    const { text, highlights, ...rest } = options || {};\n    return await this.request(constants.ENDPOINTS.SIMILAR_SEARCH, \"POST\", {\n      url,\n      contents:\n        !text && !highlights\n          ? { text: true }\n          : {\n              ...(text ? { text } : {}),\n              ...(highlights ? { highlights } : {}),\n            },\n      ...rest,\n    });\n  }\n\n  /**\n   * Retrieves contents of documents based on a list of document IDs.\n   * @param {string | string[] | SearchResult[]} ids - An array of document IDs.\n   * @param {ContentsOptions} [options] - Additional options for retrieving document contents.\n   * @returns {Promise<GetContentsResponse>} A list of document contents.\n   */\n  async getContents<T extends ContentsOptions>(\n    ids: string | string[] | SearchResult[],\n    options?: T\n  ): Promise<SearchResponse<T>> {\n    if (ids.length === 0) {\n      throw new Error(\"Must provide at least one ID\");\n    }\n    let requestIds: string[];\n    if (typeof ids === \"string\") {\n      requestIds = [ids];\n    } else if (typeof ids[0] === \"string\") {\n      requestIds = ids as string[];\n    } else {\n      requestIds = (ids as SearchResult[]).map((result) => result.id);\n    }\n    return await this.request(constants.ENDPOINTS.CONTENTS, \"POST\", {\n      ids: requestIds,\n      ...options,\n    });\n  }\n}\n\nexport default Exa;\n","const BASE_URL = \"https://api.exa.ai\";\nconst USER_AGENT = \"exa-node 1.0.27\";\nconst CONTENT_TYPE = \"application/json\";\nconst ENDPOINTS = {\n  SEARCH: \"/search\",\n  SIMILAR_SEARCH: \"/findSimilar\",\n  CONTENTS: \"/contents\",\n};\n\nexport const constants = {\n  BASE_URL,\n  USER_AGENT,\n  CONTENT_TYPE,\n  ENDPOINTS,\n};\n"],"mappings":"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","names":["fetch"]}