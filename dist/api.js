"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Search API
 * A comprehensive API for neural internet-scale search, allowing users to perform queries and retrieve results from a wide variety of sources.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Find similar links to the link provided.
         * @summary Find similar links
         * @param {FindSimilarRequest} findSimilarRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSimilar: async (findSimilarRequest, options = {}) => {
            // verify required parameter 'findSimilarRequest' is not null or undefined
            (0, common_1.assertParamExists)('findSimilar', 'findSimilarRequest', findSimilarRequest);
            const localVarPath = `/findSimilar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(findSimilarRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve contents of documents based on a list of document IDs.
         * @summary Get contents of documents
         * @param {Array<string>} ids An array of document IDs obtained from either /search or /findSimilar endpoints.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContents: async (ids, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('getContents', 'ids', ids);
            const localVarPath = `/contents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a search with a Metaphor prompt-engineered query and retrieve a list of relevant results.
         * @summary Search
         * @param {SearchRequest} searchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (searchRequest, options = {}) => {
            // verify required parameter 'searchRequest' is not null or undefined
            (0, common_1.assertParamExists)('search', 'searchRequest', searchRequest);
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(searchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         * Find similar links to the link provided.
         * @summary Find similar links
         * @param {FindSimilarRequest} findSimilarRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSimilar(findSimilarRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSimilar(findSimilarRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve contents of documents based on a list of document IDs.
         * @summary Get contents of documents
         * @param {Array<string>} ids An array of document IDs obtained from either /search or /findSimilar endpoints.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContents(ids, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContents(ids, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Perform a search with a Metaphor prompt-engineered query and retrieve a list of relevant results.
         * @summary Search
         * @param {SearchRequest} searchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(searchRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(searchRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         * Find similar links to the link provided.
         * @summary Find similar links
         * @param {FindSimilarRequest} findSimilarRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSimilar(findSimilarRequest, options) {
            return localVarFp.findSimilar(findSimilarRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve contents of documents based on a list of document IDs.
         * @summary Get contents of documents
         * @param {Array<string>} ids An array of document IDs obtained from either /search or /findSimilar endpoints.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContents(ids, options) {
            return localVarFp.getContents(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform a search with a Metaphor prompt-engineered query and retrieve a list of relevant results.
         * @summary Search
         * @param {SearchRequest} searchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(searchRequest, options) {
            return localVarFp.search(searchRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     * Find similar links to the link provided.
     * @summary Find similar links
     * @param {FindSimilarRequest} findSimilarRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    findSimilar(findSimilarRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).findSimilar(findSimilarRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve contents of documents based on a list of document IDs.
     * @summary Get contents of documents
     * @param {Array<string>} ids An array of document IDs obtained from either /search or /findSimilar endpoints.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getContents(ids, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getContents(ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Perform a search with a Metaphor prompt-engineered query and retrieve a list of relevant results.
     * @summary Search
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    search(searchRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).search(searchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.default = DefaultApi;
